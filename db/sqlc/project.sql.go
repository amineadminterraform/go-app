// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: project.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProject = `-- name: CreateProject :one
INSERT INTO project (
    name,
    git_path,
    description
) VALUES (
    $1, $2, $3
) RETURNING id, name, git_path, created_at, description
`

type CreateProjectParams struct {
	Name        string      `json:"name"`
	GitPath     string      `json:"git_path"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject, arg.Name, arg.GitPath, arg.Description)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GitPath,
		&i.CreatedAt,
		&i.Description,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM project
WHERE id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProject, id)
	return err
}

const getProject = `-- name: GetProject :one
SELECT id, name, git_path, created_at, description FROM project
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProject(ctx context.Context, id int64) (Project, error) {
	row := q.db.QueryRow(ctx, getProject, id)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GitPath,
		&i.CreatedAt,
		&i.Description,
	)
	return i, err
}

const listProjects = `-- name: ListProjects :many
SELECT id, name, git_path, created_at, description FROM project
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListProjectsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProjects(ctx context.Context, arg ListProjectsParams) ([]Project, error) {
	rows, err := q.db.Query(ctx, listProjects, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.GitPath,
			&i.CreatedAt,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :exec
UPDATE project
  set name = $2,
  git_path = $3,
  description = $4
WHERE id = $1
`

type UpdateProjectParams struct {
	ID          int64       `json:"id"`
	Name        string      `json:"name"`
	GitPath     string      `json:"git_path"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) error {
	_, err := q.db.Exec(ctx, updateProject,
		arg.ID,
		arg.Name,
		arg.GitPath,
		arg.Description,
	)
	return err
}
