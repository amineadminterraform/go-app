// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: template.sql

package db

import (
	"context"
)

const createTemplate = `-- name: CreateTemplate :one
INSERT INTO template (
    name,
    path
) VALUES (
    $1, $2
) RETURNING id, name, path
`

type CreateTemplateParams struct {
	Name string `json:"name"`
	Path string `json:"path"`
}

func (q *Queries) CreateTemplate(ctx context.Context, arg CreateTemplateParams) (Template, error) {
	row := q.db.QueryRow(ctx, createTemplate, arg.Name, arg.Path)
	var i Template
	err := row.Scan(&i.ID, &i.Name, &i.Path)
	return i, err
}

const deleteTemplate = `-- name: DeleteTemplate :exec
DELETE FROM project_environment
WHERE id = $1
`

func (q *Queries) DeleteTemplate(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTemplate, id)
	return err
}

const getTemplate = `-- name: GetTemplate :one
SELECT id, name, path FROM template
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTemplate(ctx context.Context, id int64) (Template, error) {
	row := q.db.QueryRow(ctx, getTemplate, id)
	var i Template
	err := row.Scan(&i.ID, &i.Name, &i.Path)
	return i, err
}

const listTemplates = `-- name: ListTemplates :many
SELECT id, name, path FROM template
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTemplatesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTemplates(ctx context.Context, arg ListTemplatesParams) ([]Template, error) {
	rows, err := q.db.Query(ctx, listTemplates, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Template
	for rows.Next() {
		var i Template
		if err := rows.Scan(&i.ID, &i.Name, &i.Path); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTemplate = `-- name: UpdateTemplate :exec
UPDATE template
  set name = $2,
  path = $3
WHERE id = $1
`

type UpdateTemplateParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
	Path string `json:"path"`
}

func (q *Queries) UpdateTemplate(ctx context.Context, arg UpdateTemplateParams) error {
	_, err := q.db.Exec(ctx, updateTemplate, arg.ID, arg.Name, arg.Path)
	return err
}
