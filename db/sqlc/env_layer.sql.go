// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: env_layer.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEnvLayer = `-- name: CreateEnvLayer :one
INSERT INTO env_layer (
    environment_id,
    s3_path,
    process_id,
    current_request_id
) VALUES (
    $1, $2, $3, $4
) RETURNING id, environment_id, s3_path, updated_at, created_at, process_id, current_request_id
`

type CreateEnvLayerParams struct {
	EnvironmentID    int64       `json:"environment_id"`
	S3Path           string      `json:"s3_path"`
	ProcessID        int64       `json:"process_id"`
	CurrentRequestID pgtype.Int8 `json:"current_request_id"`
}

func (q *Queries) CreateEnvLayer(ctx context.Context, arg CreateEnvLayerParams) (EnvLayer, error) {
	row := q.db.QueryRow(ctx, createEnvLayer,
		arg.EnvironmentID,
		arg.S3Path,
		arg.ProcessID,
		arg.CurrentRequestID,
	)
	var i EnvLayer
	err := row.Scan(
		&i.ID,
		&i.EnvironmentID,
		&i.S3Path,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.ProcessID,
		&i.CurrentRequestID,
	)
	return i, err
}

const deleteEnvLayer = `-- name: DeleteEnvLayer :exec
DELETE FROM env_layer
WHERE id = $1
`

func (q *Queries) DeleteEnvLayer(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEnvLayer, id)
	return err
}

const getEnvLayer = `-- name: GetEnvLayer :one
SELECT id, environment_id, s3_path, updated_at, created_at, process_id, current_request_id FROM env_layer
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEnvLayer(ctx context.Context, id int64) (EnvLayer, error) {
	row := q.db.QueryRow(ctx, getEnvLayer, id)
	var i EnvLayer
	err := row.Scan(
		&i.ID,
		&i.EnvironmentID,
		&i.S3Path,
		&i.UpdatedAt,
		&i.CreatedAt,
		&i.ProcessID,
		&i.CurrentRequestID,
	)
	return i, err
}

const listEnvLayers = `-- name: ListEnvLayers :many
SELECT id, environment_id, s3_path, updated_at, created_at, process_id, current_request_id FROM env_layer
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListEnvLayersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEnvLayers(ctx context.Context, arg ListEnvLayersParams) ([]EnvLayer, error) {
	rows, err := q.db.Query(ctx, listEnvLayers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EnvLayer{}
	for rows.Next() {
		var i EnvLayer
		if err := rows.Scan(
			&i.ID,
			&i.EnvironmentID,
			&i.S3Path,
			&i.UpdatedAt,
			&i.CreatedAt,
			&i.ProcessID,
			&i.CurrentRequestID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEnvLayer = `-- name: UpdateEnvLayer :exec
UPDATE env_layer
  set s3_path = $2,
  process_id = $3,
  current_request_id = $4,
  updated_at = now()
  WHERE id = $1
`

type UpdateEnvLayerParams struct {
	ID               int64       `json:"id"`
	S3Path           string      `json:"s3_path"`
	ProcessID        int64       `json:"process_id"`
	CurrentRequestID pgtype.Int8 `json:"current_request_id"`
}

func (q *Queries) UpdateEnvLayer(ctx context.Context, arg UpdateEnvLayerParams) error {
	_, err := q.db.Exec(ctx, updateEnvLayer,
		arg.ID,
		arg.S3Path,
		arg.ProcessID,
		arg.CurrentRequestID,
	)
	return err
}
