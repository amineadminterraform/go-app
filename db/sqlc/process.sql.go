// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: process.sql

package db

import (
	"context"
)

const createProcess = `-- name: CreateProcess :one
INSERT INTO process (
    argo_id,
    name,
    template_id
) VALUES (
    $1, $2, $3
) RETURNING id, argo_id, name, created_at, template_id
`

type CreateProcessParams struct {
	ArgoID     int64  `json:"argo_id"`
	Name       string `json:"name"`
	TemplateID int64  `json:"template_id"`
}

func (q *Queries) CreateProcess(ctx context.Context, arg CreateProcessParams) (Process, error) {
	row := q.db.QueryRow(ctx, createProcess, arg.ArgoID, arg.Name, arg.TemplateID)
	var i Process
	err := row.Scan(
		&i.ID,
		&i.ArgoID,
		&i.Name,
		&i.CreatedAt,
		&i.TemplateID,
	)
	return i, err
}

const deleteProcess = `-- name: DeleteProcess :exec
DELETE FROM process
WHERE id = $1
`

func (q *Queries) DeleteProcess(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProcess, id)
	return err
}

const getProcess = `-- name: GetProcess :one
SELECT id, argo_id, name, created_at, template_id FROM process
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProcess(ctx context.Context, id int64) (Process, error) {
	row := q.db.QueryRow(ctx, getProcess, id)
	var i Process
	err := row.Scan(
		&i.ID,
		&i.ArgoID,
		&i.Name,
		&i.CreatedAt,
		&i.TemplateID,
	)
	return i, err
}

const listProcesss = `-- name: ListProcesss :many
SELECT id, argo_id, name, created_at, template_id FROM process
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListProcesssParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProcesss(ctx context.Context, arg ListProcesssParams) ([]Process, error) {
	rows, err := q.db.Query(ctx, listProcesss, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Process{}
	for rows.Next() {
		var i Process
		if err := rows.Scan(
			&i.ID,
			&i.ArgoID,
			&i.Name,
			&i.CreatedAt,
			&i.TemplateID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProcess = `-- name: UpdateProcess :exec
UPDATE process
  set argo_id = $2,
  name= $3,
  template_id = $4,
  updated_at = now()
WHERE id = $1
`

type UpdateProcessParams struct {
	ID         int64  `json:"id"`
	ArgoID     int64  `json:"argo_id"`
	Name       string `json:"name"`
	TemplateID int64  `json:"template_id"`
}

func (q *Queries) UpdateProcess(ctx context.Context, arg UpdateProcessParams) error {
	_, err := q.db.Exec(ctx, updateProcess,
		arg.ID,
		arg.ArgoID,
		arg.Name,
		arg.TemplateID,
	)
	return err
}
