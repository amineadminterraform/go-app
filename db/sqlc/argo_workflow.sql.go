// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: argo_workflow.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createArgoWorkflow = `-- name: CreateArgoWorkflow :one
INSERT INTO argo_workflow (
    name,
    path,
    description
) VALUES (
    $1, $2, $3
) RETURNING id, name, path, description, updated_at, created_at
`

type CreateArgoWorkflowParams struct {
	Name        string      `json:"name"`
	Path        string      `json:"path"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateArgoWorkflow(ctx context.Context, arg CreateArgoWorkflowParams) (ArgoWorkflow, error) {
	row := q.db.QueryRow(ctx, createArgoWorkflow, arg.Name, arg.Path, arg.Description)
	var i ArgoWorkflow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.Description,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteArgoWorkflow = `-- name: DeleteArgoWorkflow :exec
DELETE FROM argo_workflow
WHERE id = $1
`

func (q *Queries) DeleteArgoWorkflow(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteArgoWorkflow, id)
	return err
}

const getArgoWorkflow = `-- name: GetArgoWorkflow :one
SELECT id, name, path, description, updated_at, created_at FROM argo_workflow
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetArgoWorkflow(ctx context.Context, id int64) (ArgoWorkflow, error) {
	row := q.db.QueryRow(ctx, getArgoWorkflow, id)
	var i ArgoWorkflow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.Description,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listArgoWorkflows = `-- name: ListArgoWorkflows :many
SELECT id, name, path, description, updated_at, created_at FROM argo_workflow
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListArgoWorkflowsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListArgoWorkflows(ctx context.Context, arg ListArgoWorkflowsParams) ([]ArgoWorkflow, error) {
	rows, err := q.db.Query(ctx, listArgoWorkflows, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ArgoWorkflow{}
	for rows.Next() {
		var i ArgoWorkflow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Path,
			&i.Description,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArgoWorkflow = `-- name: UpdateArgoWorkflow :exec
UPDATE argo_workflow
  set name = $2,
    path = $3,
    description =$4,
  updated_at = now()
WHERE id = $1
`

type UpdateArgoWorkflowParams struct {
	ID          int64       `json:"id"`
	Name        string      `json:"name"`
	Path        string      `json:"path"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateArgoWorkflow(ctx context.Context, arg UpdateArgoWorkflowParams) error {
	_, err := q.db.Exec(ctx, updateArgoWorkflow,
		arg.ID,
		arg.Name,
		arg.Path,
		arg.Description,
	)
	return err
}
