// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: project_environment.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProjectEnvironment = `-- name: CreateProjectEnvironment :one
INSERT INTO project_environment (
    git_branch,
    project_id,
    description
) VALUES (
    $1, $2, $3
) RETURNING id, git_branch, project_id, description, updated_at, created_at
`

type CreateProjectEnvironmentParams struct {
	GitBranch   string      `json:"git_branch"`
	ProjectID   int64       `json:"project_id"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateProjectEnvironment(ctx context.Context, arg CreateProjectEnvironmentParams) (ProjectEnvironment, error) {
	row := q.db.QueryRow(ctx, createProjectEnvironment, arg.GitBranch, arg.ProjectID, arg.Description)
	var i ProjectEnvironment
	err := row.Scan(
		&i.ID,
		&i.GitBranch,
		&i.ProjectID,
		&i.Description,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteProjectEnvironment = `-- name: DeleteProjectEnvironment :exec
DELETE FROM project_environment
WHERE id = $1
`

func (q *Queries) DeleteProjectEnvironment(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProjectEnvironment, id)
	return err
}

const getProjectEnvironment = `-- name: GetProjectEnvironment :one
SELECT id, git_branch, project_id, description, updated_at, created_at FROM project_environment
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProjectEnvironment(ctx context.Context, id int64) (ProjectEnvironment, error) {
	row := q.db.QueryRow(ctx, getProjectEnvironment, id)
	var i ProjectEnvironment
	err := row.Scan(
		&i.ID,
		&i.GitBranch,
		&i.ProjectID,
		&i.Description,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listProjectEnvironments = `-- name: ListProjectEnvironments :many
SELECT id, git_branch, project_id, description, updated_at, created_at FROM project_environment
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListProjectEnvironmentsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProjectEnvironments(ctx context.Context, arg ListProjectEnvironmentsParams) ([]ProjectEnvironment, error) {
	rows, err := q.db.Query(ctx, listProjectEnvironments, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProjectEnvironment{}
	for rows.Next() {
		var i ProjectEnvironment
		if err := rows.Scan(
			&i.ID,
			&i.GitBranch,
			&i.ProjectID,
			&i.Description,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProjectEnvironment = `-- name: UpdateProjectEnvironment :exec
UPDATE project_environment
  set git_branch = $2,
  project_id = $3,
  description = $4,
  updated_at = now()
WHERE id = $1
`

type UpdateProjectEnvironmentParams struct {
	ID          int64       `json:"id"`
	GitBranch   string      `json:"git_branch"`
	ProjectID   int64       `json:"project_id"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateProjectEnvironment(ctx context.Context, arg UpdateProjectEnvironmentParams) error {
	_, err := q.db.Exec(ctx, updateProjectEnvironment,
		arg.ID,
		arg.GitBranch,
		arg.ProjectID,
		arg.Description,
	)
	return err
}
